{"ast":null,"code":"var _jsxFileName = \"/Users/yong/development/projects/park-selector-app/src/components/ParksCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ParksContext } from \"../contexts/ParksProvider\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ParksCard = props => {\n  _s();\n  const {\n    parksData\n  } = useContext(ParksContext);\n  const [startingPosition, setStartingPosition] = useState(0);\n  const [trialRandParks, setTrialRandParks] = useState([]);\n  const [parkHistory, setParkHistory] = useState([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const [scrollNumMin, setScrollNumMin] = useState(0);\n  const [scrollNumMax, setScrollNumMax] = useState(0);\n  const randomParks = limit => {\n    let randParks = [];\n    if (parksData.length > 0) {\n      for (let i = startingPosition; i < limit + startingPosition; i++) {\n        let random = parksData[Math.floor(Math.random() * parksData.length)];\n        randParks.push(random);\n      }\n    }\n    setParkHistory(prevHistory => [...prevHistory, ...randParks]);\n    console.log(parkHistory);\n    return setTrialRandParks(randParks);\n  };\n  const displayParks = showHistory ? parkHistory && parkHistory.map((park, index) => {\n    if (index < scrollNumMax && index >= scrollNumMin) {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        park: park\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 18\n      }, this);\n    }\n  }) : trialRandParks.length === props.cardCount && trialRandParks.map(park => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      park: park\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  });\n  useEffect(() => {\n    setShowHistory(false);\n    setScrollNumMin(parkHistory.length - 6);\n    setScrollNumMax(parkHistory.length);\n    randomParks(props.cardCount);\n  }, [props.cardCount]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: parksData.length <= 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Is loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showHistory && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", \"Displaying Parks-list \", scrollNumMin + 1, \" to\", \" \", scrollNumMax > parkHistory.length ? parkHistory.length : scrollNumMax, \" \", \"of \", parkHistory.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-3 gap-8 ml-8\",\n        children: displayParks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(ImgButton, {\n          onClick: () => randomParks(props.cardCount),\n          children: [\" \", \"Add \", props.cardCount, \" New Parks To View\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImgButton, {\n          onClick: () => {\n            setShowHistory(true);\n            setScrollNumMin(prevScrollNumMin => prevScrollNumMin - 6 <= 0 ? 0 : prevScrollNumMin - 6);\n            setScrollNumMax(prevScrollNumMax => prevScrollNumMax - 6 <= 6 ? 6 : prevScrollNumMax - 6);\n          },\n          children: \"Prev Parks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImgButton, {\n          onClick: () => {\n            setShowHistory(true);\n            setScrollNumMin(prevScrollNumMin => prevScrollNumMin >= parkHistory.length - 6 ? prevScrollNumMin : prevScrollNumMin + 6);\n            setScrollNumMax(prevScrollNumMax => prevScrollNumMax >= parkHistory.length ? prevScrollNumMax : prevScrollNumMax + 6);\n          },\n          children: \"Next Parks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n_s(ParksCard, \"Uv5dqrFGs8WtE5ZfVtZ+L4eQcyc=\");\n_c = ParksCard;\nexport default ParksCard;\nvar _c;\n$RefreshReg$(_c, \"ParksCard\");","map":{"version":3,"names":["React","useContext","useEffect","useState","ParksContext","Card","ParksCard","props","parksData","startingPosition","setStartingPosition","trialRandParks","setTrialRandParks","parkHistory","setParkHistory","showHistory","setShowHistory","scrollNumMin","setScrollNumMin","scrollNumMax","setScrollNumMax","randomParks","limit","randParks","length","i","random","Math","floor","push","prevHistory","console","log","displayParks","map","park","index","cardCount","textAlign","prevScrollNumMin","prevScrollNumMax"],"sources":["/Users/yong/development/projects/park-selector-app/src/components/ParksCard.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\"\nimport { ParksContext } from \"../contexts/ParksProvider\"\nimport Card from \"./Card\"\n\nconst ParksCard = (props) => {\n  const { parksData } = useContext(ParksContext)\n  const [startingPosition, setStartingPosition] = useState(0)\n  const [trialRandParks, setTrialRandParks] = useState([])\n  const [parkHistory, setParkHistory] = useState([])\n  const [showHistory, setShowHistory] = useState(false)\n  const [scrollNumMin, setScrollNumMin] = useState(0)\n  const [scrollNumMax, setScrollNumMax] = useState(0)\n\n  const randomParks = (limit) => {\n    let randParks = []\n    if (parksData.length > 0) {\n      for (let i = startingPosition; i < limit + startingPosition; i++) {\n        let random = parksData[Math.floor(Math.random() * parksData.length)]\n        randParks.push(random)\n      }\n    }\n\n    setParkHistory((prevHistory) => [...prevHistory, ...randParks])\n    console.log(parkHistory)\n    return setTrialRandParks(randParks)\n  }\n  const displayParks = showHistory\n    ? parkHistory &&\n      parkHistory.map((park, index) => {\n        if (index < scrollNumMax && index >= scrollNumMin) {\n          return <Card park={park} />\n        }\n      })\n    : trialRandParks.length === props.cardCount &&\n      trialRandParks.map((park) => {\n        return <Card park={park} />\n      })\n\n  useEffect(() => {\n    setShowHistory(false)\n    setScrollNumMin(parkHistory.length - 6)\n    setScrollNumMax(parkHistory.length)\n    randomParks(props.cardCount)\n  }, [props.cardCount])\n\n  return (\n    <>\n      {parksData.length <= 0 ? (\n        <p>Is loading</p>\n      ) : (\n        <>\n          {showHistory && (\n            <div style={{ textAlign: \"center\" }}>\n              <h1>\n                {\" \"}\n                Displaying Parks-list {scrollNumMin + 1} to{\" \"}\n                {scrollNumMax > parkHistory.length\n                  ? parkHistory.length\n                  : scrollNumMax}{\" \"}\n                of {parkHistory.length}\n              </h1>\n            </div>\n          )}\n          <div className='grid grid-cols-3 gap-8 ml-8'>{displayParks}</div>\n          <ButtonWrapper>\n            <ImgButton onClick={() => randomParks(props.cardCount)}>\n              {\" \"}\n              Add {props.cardCount} New Parks To View\n            </ImgButton>\n            <ImgButton\n              onClick={() => {\n                setShowHistory(true)\n                setScrollNumMin((prevScrollNumMin) =>\n                  prevScrollNumMin - 6 <= 0 ? 0 : prevScrollNumMin - 6\n                )\n                setScrollNumMax((prevScrollNumMax) =>\n                  prevScrollNumMax - 6 <= 6 ? 6 : prevScrollNumMax - 6\n                )\n              }}\n            >\n              Prev Parks\n            </ImgButton>\n            <ImgButton\n              onClick={() => {\n                setShowHistory(true)\n                setScrollNumMin((prevScrollNumMin) =>\n                  prevScrollNumMin >= parkHistory.length - 6\n                    ? prevScrollNumMin\n                    : prevScrollNumMin + 6\n                )\n                setScrollNumMax((prevScrollNumMax) =>\n                  prevScrollNumMax >= parkHistory.length\n                    ? prevScrollNumMax\n                    : prevScrollNumMax + 6\n                )\n              }}\n            >\n              Next Parks\n            </ImgButton>\n          </ButtonWrapper>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default ParksCard\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}